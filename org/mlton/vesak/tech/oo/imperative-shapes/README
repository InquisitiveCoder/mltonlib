OO Shapes Example
=================

  The code in this directory along with the minimal OO framework in a
  separate directory implements the "OO Shapes Example" described on the
  following pages:

    http://onestepback.org/articles/poly/
    http://www.angelfire.com/tx4/cus/shapes/

  I might write a more thorough explanation of this code at some point,
  but below are some random notes for starters.

  Standard ML does not provide subtyping or inheritance.  The example
  encodes subtyping using parametric polymorphism.  This is an old trick.
  See [http://mlton.org/References#Berthomieu00] for a thorough treatment.

  More precisely, subtyping is encoded using open products.  The infix
  product type is just for convenience to avoid having to write nested
  parentheses.

  The main purpose of the OO framework is to provide the Sub functor for
  creating subtypes more mechanically.

  The way to think about the code is that types define interfaces and the
  "new" functions define classes.  A class can encapsulate arbitrary state
  or data.

  No implementation inheritance is used in the example.

  The "part" function specified in the ANY signature is for coercing an
  object to one of its supertypes.  I would have preferred to call it
  "from", so a call could be read naturally as in

     Shape.from rectangle

  but "from" is a reserved word in Alice ML.  Feel free to suggest a
  better name.

  All signatures in this example are strictly unnecessary.  That includes
  separate signature definitions and signatures given for particular
  structures.  The reason why the signatures are unnecessary is that all
  implementation hiding is already done by the interface and class
  definitions.  The signatures are provided mostly for readability.

  The Var structure is also just for convenience to avoid some code
  duplication.  Note that specifying a 'a Var.t field does not restrict
  the way in which the get and set methods for that field are implemented.
