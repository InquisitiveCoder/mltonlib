(* Copyright (C) 2006-2007 SSH Communications Security, Helsinki, Finland
 *
 * This code is released under the MLton license, a BSD-style license.
 * See the LICENSE file or http://mlton.org/License for details.
 *)

(*
 * This basis file defines only the extensions provided by this library.
 * Users may refer to this basis file, but this is probably more
 * interesting to maintainers.  You can, for example, run the command
 *
 *    mlton -stop tc                            \
 *          -mlb-path-map ~/.mlton/mlb-path-map \
 *          -show-basis extensions.basis        \
 *          extensions.mlb
 *
 * and inspect the generated file (extensions.basis) to get a precise and
 * accurate picture of the extensions provided by this library.  The
 * mlb-path-map must also contain the variable SML_COMPILER specifying the
 * SML compiler mnemonic (mlton).
 *)

local
   local
      $(SML_LIB)/basis/basis.mlb
   in
      detail/common/basis.sml
      detail/$(SML_COMPILER)/basis.sml
   end
   $(SML_LIB)/basis/pervasive.mlb
in
   ann
      "forceUsed"
      "sequenceNonUnit warn"
      "warnUnused true"
   in
      local
         (* Workarounds (if any). *)
         detail/$(SML_COMPILER)/workarounds.mlb

         (* Minimal modules for bootstrapping. *)
         detail/bootstrap.sml

         (* Compiler specific extensions (if any). *)
         detail/$(SML_COMPILER)/extensions.mlb

         (* Concept signatures *)
         public/concept/bitwise.sig
         public/concept/bounded.sig
         public/concept/cased.sig
         public/concept/cstringable.sig
         public/concept/equality.sig
         public/concept/flags.sig
         public/concept/func.sig
         public/concept/monad.sig
         public/concept/ordered.sig
         public/concept/scannable.sig
         public/concept/signed.sig
         public/concept/stringable.sig

         (* MkBounded *)
         detail/concept/mk-bounded.fun

         (* MkEquality *)
         detail/concept/mk-equality.fun

         (* MkScannable *)
         detail/concept/mk-scannable.fun

         (* MkStringable *)
         detail/concept/mk-stringable.fun

         (* MkCStringable *)
         detail/concept/mk-cstringable.fun

         (* Void *)
         public/void.sig

         (* Fn *)
         public/fn/fn.sig
         detail/fn.sml

         (* Basic *)
         public/basic.sig
         detail/basic.sml

         (* Unit *)
         public/data/unit.sig

         (* Sq *)
         public/data/sq.sig
         detail/sq.sml

         (* BinFn *)
         public/fn/bin-fn.sig detail/bin-fn.sml

         (* UnOp *)
         public/fn/un-op.sig
         detail/un-op.sml

         (* Thunk *)
         public/fn/thunk.sig
         detail/thunk.sml

         (* Univ *)
         public/data/univ.sig
         local
            ann "warnUnused false" in
               detail/univ-ref.sml
               detail/univ-exn.sml
            end
         in
            detail/$(SML_COMPILER)/univ.sml
         end

         (* BinOp *)
         public/fn/bin-op.sig
         detail/bin-op.sml

         (* Effect *)
         public/fn/effect.sig
         detail/effect.sml

         (* Fix *)
         public/generic/fix.sig
         detail/generic/fix.sml

         (* UnPr *)
         public/fn/un-pr.sig
         detail/un-pr.sml

         (* Order *)
         public/data/order.sig
         detail/order.sml

         (* BinPr *)
         public/fn/bin-pr.sig
         detail/bin-pr.sml

         (* Cmp *)
         public/fn/cmp.sig
         detail/cmp.sml

         (* MkOrdered *)
         detail/concept/mk-ordered.fun

         (* Ref *)
         public/data/ref.sig
         detail/ref.sml

         (* Bool *)
         public/data/bool.sig
         detail/bool.sml

         (* Products *)
         public/data/product-type.sig
         public/data/pair.sig
         detail/pair.sml
         public/data/product.sig
         detail/product.sml

         (* MkMonad *)
         detail/concept/mk-monad.fun

         (* With *)
         public/control/with.sig
         detail/control/with.sml

         (* Sum *)
         public/data/sum.sig
         detail/sum.sml

         (* Exn *)
         public/control/exn.sig
         detail/control/exn.sml

         (* Emb *)
         public/generic/emb.sig
         detail/generic/emb.sml

         (* Iso *)
         public/generic/iso.sig
         detail/generic/iso.sml

         (* Tie *)
         public/generic/tie.sig
         detail/generic/tie.sml

         (* Seqs *)
         public/sequence/array.sig
         public/sequence/array-slice.sig
         public/sequence/vector.sig
         public/sequence/vector-slice.sig
         detail/mk-seq-common-ext.fun
         detail/array.sml
         detail/array-slice.sml
         detail/vector.sml
         detail/vector-slice.sml

         (* Option *)
         public/data/option.sig
         detail/option.sml

         (* List *)
         public/sequence/list.sig
         detail/list.sml

         (* Buffer *)
         public/sequence/buffer.sig
         detail/buffer.sml

         (* Reader *)
         public/reader.sig
         detail/reader.sml

         (* Writer *)
         public/writer.sig
         detail/writer.sml

         (* Exit *)
         public/control/exit.sig
         detail/control/exit.sml

         (* Scalars *)
         public/numeric/int-inf.sig
         public/numeric/integer.sig
         public/numeric/real.sig
         public/numeric/word.sig
         detail/mk-integer-ext.fun
         detail/mk-int-inf-ext.fun
         detail/mk-real-ext.fun
         detail/mk-word-ext.fun
         detail/common/scalars.sml
         detail/$(SML_COMPILER)/ints.sml
         detail/$(SML_COMPILER)/reals.sml
         detail/$(SML_COMPILER)/words.sml

         (* MonoSeqs *)
         public/sequence/mono-vector.sig
         public/sequence/mono-vector-slice.sig
         public/sequence/mono-array.sig
         public/sequence/mono-array-slice.sig
         public/text/char.sig
         public/text/string.sig
         public/text/substring.sig
         public/text/text.sig
         detail/mk-mono-seq-common-ext.fun
         detail/mk-mono-vector-ext.fun
         detail/mk-mono-vector-slice-ext.fun
         detail/mk-mono-array-ext.fun
         detail/mk-mono-array-slice-ext.fun
         detail/mk-text-ext.fun
         detail/common/mono-seqs.sml
         detail/$(SML_COMPILER)/mono-vectors.sml
         detail/$(SML_COMPILER)/mono-vector-slices.sml
         detail/$(SML_COMPILER)/mono-arrays.sml
         detail/$(SML_COMPILER)/mono-array-slices.sml
         detail/$(SML_COMPILER)/texts.sml

         (* Promise *)
         public/lazy/promise.sig
         detail/lazy/promise.sml

         (* ShiftOp *)
         public/fn/shift-op.sig

         (* TextIO *)
         public/io/text-io.sig
         detail/io/text-io.sml

         (* MkWordFlags *)
         detail/concept/mk-word-flags.fun
      in
         public/export/$(SML_COMPILER).sml
         public/export/common.sml
         public/export/top-level.sml
         public/export/infixes.sml
      end
   end
end
