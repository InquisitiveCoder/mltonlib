(* Copyright (C) 2006 SSH Communications Security, Helsinki, Finland
 *
 * MLton is released under a BSD-style license.
 * See the file MLton-LICENSE for details.
 *)

local
   val compiler =
       case OS.Process.getEnv "SML_COMPILER" of
          SOME c => c
        | NONE => raise Fail "The SML_COMPILER env var isn't defined"
in
   val () =
       app use
           [(* NOTE: Order matters. *)

            (* Workarounds (if any) *)
            "detail/"^compiler^"/workarounds.use",

            (* New {Iso :> ISO} and {Emb :> EMB} modules *)
            "public/emb.sig",
            "detail/emb.sml",
            "public/iso.sig",
            "detail/iso.sml",

            (* Extension functors *)
            "detail/mk-integer-ext.fun",
            "detail/mk-int-inf-ext.fun",
            "detail/mk-real-ext.fun",
            "detail/mk-word-ext.fun",
            "detail/mk-mono-vector-ext.fun",
            "detail/mk-mono-vector-slice-ext.fun",
            "detail/mk-mono-array-ext.fun",
            "detail/mk-mono-array-slice-ext.fun",
            "detail/mk-text-ext.fun",

            (* Extended signatures *)
            "public/bool.sig",
            "public/option.sig",
            "public/int-inf.sig",
            "public/integer.sig",
            "public/real.sig",
            "public/word.sig",
            "public/list.sig",
            "public/vector.sig",
            "public/vector-slice.sig",
            "public/array.sig",
            "public/array-slice.sig",
            "public/mono-vector.sig",
            "public/mono-vector-slice.sig",
            "public/mono-array.sig",
            "public/mono-array-slice.sig",
            "public/char.sig",
            "public/string.sig",
            "public/substring.sig",
            "public/text.sig",

            (* Extended modules *)
            "detail/bool.sml",
            "detail/option.sml",
            "detail/list.sml",
            "detail/vector.sml",
            "detail/vector-slice.sml",
            "detail/array.sml",
            "detail/array-slice.sml",
            "detail/common.sml",
            "detail/"^compiler^"/ints.sml",
            "detail/"^compiler^"/reals.sml",
            "detail/"^compiler^"/words.sml",
            "detail/"^compiler^"/mono-vectors.sml",
            "detail/"^compiler^"/mono-vector-slices.sml",
            "detail/"^compiler^"/mono-arrays.sml",
            "detail/"^compiler^"/mono-array-slices.sml",
            "detail/"^compiler^"/texts.sml",

            (* Forget implementation details (if possible) *)
            "detail/"^compiler^"/forget.use",

            (* Export filter *)
            "public/export-"^compiler^".sml",
            "public/export.sml",
            "public/top-level.sml"]
end
